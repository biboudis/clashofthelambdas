#! /usr/bin/gawk -f

# multidimentional arrays are essentially of single dimention.
# here we parse effectively e.g., results[c#@sumBaseline].
function printBenchOfLang (filename, lang, bench) {
    print bench "," results[filename, lang, bench]
}

#enforcing ordering.
function printLang (filename, lang) {
    print lang 
    lang = tolower(lang)

    printBenchOfLang(filename, lang,"sumBaseline")
    printBenchOfLang(filename, lang,"sumSeq")
    printBenchOfLang(filename, lang,"sumSeqOpt")
    printBenchOfLang(filename, lang,"sumPar")
    printBenchOfLang(filename, lang,"sumParOpt") 

    printBenchOfLang(filename, lang,"sumOfSquaresBaseline")
    printBenchOfLang(filename, lang,"sumOfSquaresSeq")
    printBenchOfLang(filename, lang,"sumOfSquaresSeqOpt") 
    printBenchOfLang(filename, lang,"sumOfSquaresPar")
    printBenchOfLang(filename, lang,"sumOfSquaresParOpt")

    printBenchOfLang(filename, lang,"sumOfSquaresEvenBaseline")
    printBenchOfLang(filename, lang,"sumOfSquaresEvenSeq")
    printBenchOfLang(filename, lang,"sumOfSquaresEvenSeqOpt")
    printBenchOfLang(filename, lang,"sumOfSquaresEvenPar")
    printBenchOfLang(filename, lang,"sumOfSquaresEvenParOpt") 

    printBenchOfLang(filename, lang,"cartBaseline")
    printBenchOfLang(filename, lang,"cartSeq")
    printBenchOfLang(filename, lang,"cartSeqOpt")
    printBenchOfLang(filename, lang,"cartPar")   
    printBenchOfLang(filename, lang,"cartParOpt")

    printBenchOfLang(filename, lang,"refBaseline")
    printBenchOfLang(filename, lang,"refSeq")
    printBenchOfLang(filename, lang,"refSeqOpt")
    printBenchOfLang(filename, lang,"refPar")   
    printBenchOfLang(filename, lang,"refParOpt")

    if (lang == "scala") {
	printBenchOfLang(filename, lang,"sumSeq_Strict")
	printBenchOfLang(filename, lang,"sumPar_Strict")

	printBenchOfLang(filename, lang,"sumOfSquaresSeq_Strict")
	printBenchOfLang(filename, lang,"sumOfSquaresPar_Strict")

	printBenchOfLang(filename, lang,"sumOfSquaresEvenSeq_Strict")
	printBenchOfLang(filename, lang,"sumOfSquaresEvenPar_Strict")

	printBenchOfLang(filename, lang,"cartSeq_Strict")
	printBenchOfLang(filename, lang,"cartPar_Strict")

	printBenchOfLang(filename, lang,"refSeq_Strict")
	printBenchOfLang(filename, lang,"refPar_Strict")
    }
}

BEGIN {
    for (i = 1; i < ARGC; i++) {
	command = "dos2unix " ARGV[i];
	system(command)
    }

    print "benchmark,mean,mean error,sdev" 
}
/\# Benchmarking/ { lang = tolower($3) }
/\# Benchmark:/ { split($3, fname,"."); name = fname[3] }
/Result:/ { mean = $2; meanerr = $4}
/Statistics:/ { 
    sdev = $11
    sub(/,/, ".", mean) 
    sub(/,/, ".", meanerr)
    sub(/,/, ".", sdev)
    stats =  mean "," meanerr "," sdev
    results[FILENAME, lang, name] = stats
}
/^sum|^cart|^ref/ {
    name = $1
    mean = $2
    meanerr = $3
    sdev = $4
    sub(/,/, ".", mean) 
    sub(/,/, ".", meanerr)
    sub(/,/, ".", sdev)
    stats =  mean "," meanerr "," sdev
    results[FILENAME, lang, name] = stats
}
END {
    for (i = 1; i < ARGC; i++) {
	split(ARGV[i], filename, ".")
	sub(".", substr(toupper(filename[2]), 1,1) , filename[2])
	print filename[2]
	printLang(ARGV[i], "Java")
	printLang(ARGV[i], "Scala")
	printLang(ARGV[i], "CSharp")
	printLang(ARGV[i], "FSharp")
    }
}

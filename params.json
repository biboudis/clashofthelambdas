{"name":"Clash of the Lambdas","tagline":"Microbenchmarking Stream APIs of Java 8, Scala, C#, F# and optimizing frameworks on Windows and Linux.","body":"Clash of the Lambdas\r\n====================\r\nMicrobenchmarking Stream APIs of the VM-based, multiparadigm languages:\r\nJava 8, Scala, C#, F# and optimizing frameworks, on Windows and on Linux.\r\n\r\nThe results are discussed in our ICOOOLPS'14 workshop paper: \r\n\r\n> http://arxiv.org/abs/1406.6631\r\n\r\nTo run the benchmarking suite as is, you will need a system with approximately\r\n3GB of free space for heap allocation. Regarding execution time, a run on a\r\nsingle platform takes approximately 30-40 minutes on an Intel Core i5.\r\n\r\n* Java 8 (jvm / [jmh](http://openjdk.java.net/projects/code-tools/jmh/))\r\n  * sequential\r\n  * parallel\r\n* Scala (jvm / [jmh](http://openjdk.java.net/projects/code-tools/jmh/))\r\n  * sequential\r\n  * parallel\r\n  * optimized sequential/parallel with [ScalaBlitz](http://scala-blitz.github.io/)\r\n* C# (clr & mono / [Lambda Microbenchmarking](https://github.com/biboudis/LambdaMicrobenchmarking)<sup>1</sup>)\r\n  * sequential\r\n  * parallel\r\n  * optimized sequential/parallel with [LinqOptimizer](https://github.com/nessos/LinqOptimizer)\r\n* F# (clr & mono / [Lambda Microbenchmarking](https://github.com/biboudis/LambdaMicrobenchmarking)<sup>1</sup>)\r\n  * sequential\r\n  * parallel\r\n  * optimized sequential/parallel with [LinqOptimizer](https://github.com/nessos/LinqOptimizer)\r\n\r\nSetting up on Windows\r\n--------------------\r\n* Install [JDK8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html). Create the ```JAVA_HOME``` env variable (for maven to work) and add to ```Path``` the ```JAVA_HOME\\bin``` directory\r\n* Install [Gnu Make for Windows](http://gnuwin32.sourceforge.net/packages/make.htm) and put the ```bin``` directory to ```PATH```\r\n* Extract [Maven](http://maven.apache.org/download.cgi) and put the ```bin``` directory to ```PATH```\r\n* Install the C#, F# compilers (if you have Visual Studio 2013 you already have them)\r\n* Update the paths in ```Makefile```\r\n\r\nSetting up on Ubuntu\r\n--------------------\r\n* Install/Extract [JDK8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) and update PATH\r\n* ```sudo apt-get install make```\r\n* ```sudo apt-get install maven```\r\n* Follow the [instructions](http://fsharp.org/use/linux/) on [fsharp.org](http://fsharp.org)\r\n\r\nRunning the microbenchmarks \r\n---------------------------\r\n(via a console on Linux o via a Powershell console on Windows)\r\n\r\n* Compile all tests with ```make```\r\n* Clean with ```make clean```\r\n* Compile a specific suite with ```make {java, csharp, fsharp, scala}```\r\n* Run microbenchmarks with ```make bench-{java, csharp, fsharp, scala}``` (e.g., ```make\r\n  bench-java```).\r\n\r\nProcessing the results\r\n----------------------\r\nIf you want to process the unified results we offer a gawk script for linux (that also makes use\r\nof the dos2unix command to convert windows result file encoding).\r\n\r\n* Run the benchmark suite with on both windows and linux with ```make bench >\r\n  results.{windows, linux}``` (any filename), or use it with tee to view the results as it runs with ```make bench | tee results.{windows, linux}```\r\n* See the unified results for all languages, platforms and benchmarks (the comma\r\n  separated values are benchmark, mean, mean error, sdev) by running\r\n  ```./process results.linux results.windows > results.processed``` (make\r\n  the script executable first).\r\n\r\nTeam\r\n----\r\n[@biboudis](https://twitter.com/biboudis), [@NickPalladinos](https://twitter.com/NickPalladinos) and [Y. Smaragdakis](http://cgi.di.uoa.gr/~smaragd/)\r\n\r\n**Footnotes:**\r\n\r\n1. A utility that was factored out as a seperate project.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}